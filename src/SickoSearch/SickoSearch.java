/*
Muttaqi Islam, Markus Berglund
Searching for products across multiple sites
 */

package SickoSearch;

import com.gargoylesoftware.htmlunit.BrowserVersion;
import com.gargoylesoftware.htmlunit.NicelyResynchronizingAjaxController;
import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.DomElement;
import com.gargoylesoftware.htmlunit.html.DomNode;
import com.gargoylesoftware.htmlunit.html.DomNodeList;
import com.gargoylesoftware.htmlunit.html.HtmlElement;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.gargoylesoftware.htmlunit.javascript.host.Element;
import com.gargoylesoftware.htmlunit.javascript.host.event.KeyboardEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.logging.Level;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.URL;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java.util.function.Supplier;
import javafx.scene.input.KeyCode;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JWindow;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.border.LineBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author muisl6048
 */
public class SickoSearch extends javax.swing.JFrame {
    
    static ArrayList<String> brands = new ArrayList<>();
    static ArrayList<String> sites = new ArrayList<>();
    static DefaultTableModel model = new DefaultTableModel();
    public static WebClient client;

    /**
     * Creates new form SuperSearchUI
     */
    public SickoSearch() {
        initComponents();
        
        model.setColumnIdentifiers(new String[]{"Product", "Link", "Price", "Favourite"});
        tblProduct.setModel(model);

        java.util.logging.Logger.getLogger("com.gargoylesoftware").setLevel(Level.OFF); 
        System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
            client = new WebClient(BrowserVersion.BEST_SUPPORTED);
            client.getOptions().setThrowExceptionOnScriptError(false);
            client.setJavaScriptTimeout(10000);
            client.getOptions().setJavaScriptEnabled(true);
            client.getOptions().setThrowExceptionOnScriptError(false);
            client.getOptions().setThrowExceptionOnFailingStatusCode(false);
            client.getOptions().setCssEnabled(false);
            client.setAjaxController(new NicelyResynchronizingAjaxController());
            client.getOptions().setTimeout(10000);
            client.getOptions().setUseInsecureSSL(true);
            client.getOptions().setRedirectEnabled(true);
            client.setCssErrorHandler(new SilentCssErrorHandler());   
        
        try {
            
            BufferedReader br = new BufferedReader(new FileReader(
                    "src/SickoSearch/designers.txt"));
            
            String in = "";
            while ((in = br.readLine()) != null) {
                
                brands.add(in);
            }
        } catch (IOException e) {System.out.println(e);}
        
        AutoSuggestor autoSuggestor = new AutoSuggestor(txtBrand, this, null, Color.WHITE.brighter(), Color.BLUE, Color.RED, 0.75f) {
            @Override
            boolean wordTyped(String typedWord) {

                //create list for dictionary this in your case might be done via calling a method which queries db and returns results as arraylist

                setDictionary(brands);
                //addToDictionary("bye");//adds a single word

                return super.wordTyped(typedWord);//now call super to check for any matches against newest dictionary
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblFav = new javax.swing.JTable();
        lblOut = new javax.swing.JLabel();
        lblPrompt = new javax.swing.JLabel();
        lblFav = new javax.swing.JLabel();
        txtBrand = new javax.swing.JTextField();
        lblPrompt1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product", "Link", "Price", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblProduct.setColumnSelectionAllowed(true);
        tblProduct.getTableHeader().setResizingAllowed(false);
        jScrollPane1.setViewportView(tblProduct);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblFav.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product", "Link", "Price", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblFav.setColumnSelectionAllowed(true);
        tblFav.getTableHeader().setResizingAllowed(false);
        jScrollPane2.setViewportView(tblFav);

        lblOut.setText("jLabel1");

        lblPrompt.setText("Enter all keywords for product, separated by commas (eg. \"blue, eqt, shoe\")");

        lblFav.setText("Favourites:");

        lblPrompt1.setText("Enter brand (eg. \"mastermind\")");
        lblPrompt1.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearch)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(txtBrand)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFav)
                            .addComponent(lblPrompt)
                            .addComponent(lblPrompt1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPrompt1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(lblPrompt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblFav)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblOut)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        List<Product> products = new ArrayList<>();
        
        try {
            System.out.println("SS 258");
            
            HtmlPage page = client.getPage("https://www.endclothing.com/ca/clothing");
            String[] keys = txtSearch.getText().replace(" ", "").toLowerCase().split(",");
            
            System.out.println("SS 263");
            boolean searchSuccess = false;
            DomElement potentialSearchTag;

            List<DomElement> psts = null;
            for (int i = 0; i < 20 && !(psts != null && psts.size() > 0); i ++) {

                System.out.println("SS 260");
                psts = page.getElementsByIdAndOrName("search");
            }

            if (psts.size() > 0 && (potentialSearchTag = psts.get(0)) != null) {

                searchSuccess = true;

                System.out.println("SS 249 Search bar found");

                potentialSearchTag.click();
                potentialSearchTag = StreamSupport.stream(page.getElementsByIdAndOrName("search").spliterator(), false)
                        .filter(x -> x.getTagName().equals("input"))
                        .findFirst()
                        .get();
                //potentialSearchTag.setTextContent();
                ((HtmlElement) potentialSearchTag).type(txtBrand.getText() + txtSearch.getText().replace(", ", " "));

                while (!potentialSearchTag.getTagName().equals("button") && potentialSearchTag != null) {

                    potentialSearchTag = potentialSearchTag.getNextElementSibling();
                }

                if (potentialSearchTag == null) {

                    searchSuccess = false;
                }

                else {

                    System.out.println("SS 78 " + page.asText());

                    URL url = potentialSearchTag.click().getUrl();

                    System.out.println(url);
                    page = client.getPage(url);
                    System.out.println("SS 281 " + page.asText());

                    products.addAll(getProductTags(page, keys, true));
                }
            }

            if (!searchSuccess) {

                System.out.println("SS 249 Search bar not found");

                Optional<DomElement> potentialBrandTag = getBrandTag(page, txtBrand.getText().toUpperCase());
                DomElement productTag;

                if (potentialBrandTag != null && potentialBrandTag.isPresent()) {

                    DomElement brandTag = potentialBrandTag.get();
                    page = brandTag.click();

                    System.out.println("SS 275 " + getProductTags(page, keys, false));
                }

                else {

                    System.out.println("No brand tag found");
                }
            }

            for (Product p : products) {

                model.addRow(new String[]{p.getName(), p.getLink(), p.getCost()});
            }
        } 
        catch (IOException e) {e.printStackTrace();} 
        catch (NoSuchElementException nsee) {nsee.printStackTrace();}
    }//GEN-LAST:event_btnSearchActionPerformed

    public static Optional<DomElement> getBrandTag(HtmlPage page, String brand) throws IOException {
            
            Iterable<DomElement> lists = page.getElementsByTagName("ul");
            
            System.out.println("SS 294 " + page + " " + lists.spliterator().estimateSize());
            
            for (DomElement de : lists) {
                
                Optional<DomElement> potentialTag = StreamSupport.stream(de.getChildElements().spliterator(), false)
                        .filter(x -> x.getTagName().equals("li"))
                        .filter(x -> checkChildrenForBrand(x, brand))
                        .findFirst();
                if (potentialTag.isPresent()) {
                    
                    return potentialTag;
                }
            }
            
            return null;
    }
    
    public static boolean checkChildrenForBrand(DomElement de, String brand) {
        DomNodeList<HtmlElement> it = de.getElementsByTagName("span");
        if (it != null && it.size() > 0) {
            
            for (DomElement ce : it) {

                if (ce.getTextContent().toUpperCase().equals(brand)) {

                    return true;
                }
                
                else {
                    
                    if (checkChildrenForBrand(ce, brand)) {
                        
                        return true;
                    }
                }
            }
        }
        
        it = de.getElementsByTagName("a");
        if (it != null && it.size() > 0) {
            
            for (DomElement ce : it) {

                if (ce.getTextContent().toUpperCase().equals(brand)) {

                    return true;
                }
                
                else {
                    
                    if (checkChildrenForBrand(ce, brand)) {
                        
                        return true;
                    }
                }
            }
        }
        
        it = de.getElementsByTagName("label");
        if (it != null && it.size() > 0) {
            
            for (DomElement ce : it) {

                if (ce.getTextContent().toUpperCase().equals(brand)) {

                    return true;
                }
                
                else {
                    
                    if (checkChildrenForBrand(ce, brand)) {
                        
                        return true;
                    }
                }
            }
        }
        
        return false;
    }
    
    public List<Product> getProductTags(HtmlPage page, String[] keys, boolean searched) throws IOException, NoSuchElementException {
        
        String initialLink = page.getBaseURI();
        boolean isProduct;
        
        List<Product> products = new ArrayList<>();
        
        String link;
        String cost;
        String name;
        
        List<DomElement> imgs = null;
        System.out.println("SS 438 " + page);
        for (int i = 0; i < 20 && !(imgs != null && imgs.size() > 0); i ++) {

            System.out.println("SS 440");
            imgs = page.getElementsByTagName("img");
        }
        
        for (DomElement de : imgs) {
            
            System.out.println("SS 398 " + de);
            isProduct = true;
            
            while (!de.getTagName().equals("a") || de.getTagName().equals("div")) {
                
                if (de.getParentNode().getClass().getSimpleName().equals("HtmlPage")) {
                    
                    break;
                }
                
                else {
                
                    de = (DomElement) (de.getParentNode());
                }
            }
            
            if (!searched) {
                
                for (String s : keys) {

                    System.out.println("SS 394 " + de.getAttribute("href"));

                    if (!de.getAttribute("href").toLowerCase().contains(s)) {

                        isProduct = false;
                    }
                }
            }
            
            else {
                
                isProduct = true;
                for (String s : keys) {

                    System.out.println("SS 481 " + de.getAttribute("href"));

                    if (!de.getAttribute("href").toLowerCase().contains(s)) {
                        
                        isProduct = false;
                    }
                }
            }
            
            if (isProduct) {
                
                link = de.getAttribute("href");
                page = client.getPage(link);
                
                System.out.println("SS 499 " + link);
                
                Optional<DomElement> potentialCostTag = null;
                for (int i = 0; i < 20 && !(potentialCostTag != null && potentialCostTag.isPresent()); i ++) {

                    System.out.println("SS 501");
                    potentialCostTag = StreamSupport
                            .stream(page.getElementsByTagName("span").spliterator(), false)
                            .filter(x -> x.getTextContent().contains("$"))
                            .findFirst();
                }
                
                if (potentialCostTag != null && potentialCostTag.isPresent()) {
                    
                    System.out.println("SS 509");
                    
                    cost = potentialCostTag
                            .get()
                            .getTextContent();

                    if (cost != null) {

                        page = client.getPage(initialLink);
                        name = de.getTextContent();

                        products.add(new Product(link, cost, name));
                    }
                }
            }
        }
        
        return products;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SickoSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SickoSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SickoSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SickoSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SickoSearch().setVisible(true);
            }
        });
    }
    
    class AutoSuggestor {

        private final JTextField textField;
        private final Window container;
        private JPanel suggestionsPanel;
        private JWindow autoSuggestionPopUpWindow;
        private String typedWord;
        private final ArrayList<String> dictionary = new ArrayList<>();
        private int currentIndexOfSpace, tW, tH;
        private DocumentListener documentListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                checkForAndShowSuggestions();
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                checkForAndShowSuggestions();
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                checkForAndShowSuggestions();
            }
        };
        private final Color suggestionsTextColor;
        private final Color suggestionFocusedColor;

        public AutoSuggestor(JTextField textField, Window mainWindow, ArrayList<String> words, Color popUpBackground, Color textColor, Color suggestionFocusedColor, float opacity) {
            this.textField = textField;
            this.suggestionsTextColor = textColor;
            this.container = mainWindow;
            this.suggestionFocusedColor = suggestionFocusedColor;
            this.textField.getDocument().addDocumentListener(documentListener);

            setDictionary(words);

            typedWord = "";
            currentIndexOfSpace = 0;
            tW = 0;
            tH = 0;

            autoSuggestionPopUpWindow = new JWindow(mainWindow);
            autoSuggestionPopUpWindow.setOpacity(opacity);

            suggestionsPanel = new JPanel();
            suggestionsPanel.setLayout(new GridLayout(0, 1));
            suggestionsPanel.setBackground(popUpBackground);

            addKeyBindingToRequestFocusInPopUpWindow();
        }

        private void addKeyBindingToRequestFocusInPopUpWindow() {
            textField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0, true), "Down released");
            textField.getActionMap().put("Down released", new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent ae) {//focuses the first label on popwindow
                    for (int i = 0; i < suggestionsPanel.getComponentCount(); i++) {
                        if (suggestionsPanel.getComponent(i) instanceof SuggestionLabel) {
                            ((SuggestionLabel) suggestionsPanel.getComponent(i)).setFocused(true);
                            autoSuggestionPopUpWindow.toFront();
                            autoSuggestionPopUpWindow.requestFocusInWindow();
                            suggestionsPanel.requestFocusInWindow();
                            suggestionsPanel.getComponent(i).requestFocusInWindow();
                            break;
                        }
                    }
                }
            });
            suggestionsPanel.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0, true), "Down released");
            suggestionsPanel.getActionMap().put("Down released", new AbstractAction() {
                int lastFocusableIndex = 0;

                @Override
                public void actionPerformed(ActionEvent ae) {//allows scrolling of labels in pop window (I know very hacky for now :))

                    ArrayList<SuggestionLabel> sls = getAddedSuggestionLabels();
                    int max = sls.size();

                    if (max > 1) {//more than 1 suggestion
                        for (int i = 0; i < max; i++) {
                            SuggestionLabel sl = sls.get(i);
                            if (sl.isFocused()) {
                                if (lastFocusableIndex == max - 1) {
                                    lastFocusableIndex = 0;
                                    sl.setFocused(false);
                                    autoSuggestionPopUpWindow.setVisible(false);
                                    setFocusToTextField();
                                    checkForAndShowSuggestions();//fire method as if document listener change occured and fired it

                                } else {
                                    sl.setFocused(false);
                                    lastFocusableIndex = i;
                                }
                            } else if (lastFocusableIndex <= i) {
                                if (i < max) {
                                    sl.setFocused(true);
                                    autoSuggestionPopUpWindow.toFront();
                                    autoSuggestionPopUpWindow.requestFocusInWindow();
                                    suggestionsPanel.requestFocusInWindow();
                                    suggestionsPanel.getComponent(i).requestFocusInWindow();
                                    lastFocusableIndex = i;
                                    break;
                                }
                            }
                        }
                    } else {//only a single suggestion was given
                        autoSuggestionPopUpWindow.setVisible(false);
                        setFocusToTextField();
                        checkForAndShowSuggestions();//fire method as if document listener change occured and fired it
                    }
                }
            });
        }

        private void setFocusToTextField() {
            container.toFront();
            container.requestFocusInWindow();
            textField.requestFocusInWindow();
        }

        public ArrayList<SuggestionLabel> getAddedSuggestionLabels() {
            ArrayList<SuggestionLabel> sls = new ArrayList<>();
            for (int i = 0; i < suggestionsPanel.getComponentCount(); i++) {
                if (suggestionsPanel.getComponent(i) instanceof SuggestionLabel) {
                    SuggestionLabel sl = (SuggestionLabel) suggestionsPanel.getComponent(i);
                    sls.add(sl);
                }
            }
            return sls;
        }

        private void checkForAndShowSuggestions() {
            typedWord = getCurrentlyTypedWord();

            suggestionsPanel.removeAll();//remove previos words/jlabels that were added

            //used to calcualte size of JWindow as new Jlabels are added
            tW = 0;
            tH = 0;

            boolean added = wordTyped(typedWord);

            if (!added) {
                if (autoSuggestionPopUpWindow.isVisible()) {
                    autoSuggestionPopUpWindow.setVisible(false);
                }
            } else {
                showPopUpWindow();
                setFocusToTextField();
            }
        }

        protected void addWordToSuggestions(String word) {
            SuggestionLabel suggestionLabel = new SuggestionLabel(word, suggestionFocusedColor, suggestionsTextColor, this);

            calculatePopUpWindowSize(suggestionLabel);

            suggestionsPanel.add(suggestionLabel);
        }

        public String getCurrentlyTypedWord() {//get newest word after last white spaceif any or the first word if no white spaces
            String text = textField.getText();
            String wordBeingTyped = "";
            if (text.contains(" ")) {
                int tmp = text.lastIndexOf(" ");
                if (tmp >= currentIndexOfSpace) {
                    currentIndexOfSpace = tmp;
                    wordBeingTyped = text.substring(text.lastIndexOf(" "));
                }
            } else {
                wordBeingTyped = text;
            }
            return wordBeingTyped.trim();
        }

        private void calculatePopUpWindowSize(JLabel label) {
            //so we can size the JWindow correctly
            if (tW < label.getPreferredSize().width) {
                tW = label.getPreferredSize().width;
            }
            tH += label.getPreferredSize().height;
        }

        private void showPopUpWindow() {
            autoSuggestionPopUpWindow.getContentPane().add(suggestionsPanel);
            autoSuggestionPopUpWindow.setMinimumSize(new Dimension(textField.getWidth(), 30));
            autoSuggestionPopUpWindow.setSize(tW, tH);
            autoSuggestionPopUpWindow.setVisible(true);

            int windowX = 0;
            int windowY = 0;

            windowX = container.getX() + textField.getX() + 5;
            if (suggestionsPanel.getHeight() > autoSuggestionPopUpWindow.getMinimumSize().height) {
                windowY = container.getY() + textField.getY() + textField.getHeight() + autoSuggestionPopUpWindow.getMinimumSize().height;
            } else {
                windowY = container.getY() + textField.getY() + textField.getHeight() + autoSuggestionPopUpWindow.getHeight();
            }

            autoSuggestionPopUpWindow.setLocation(windowX, windowY);
            autoSuggestionPopUpWindow.setMinimumSize(new Dimension(textField.getWidth(), 30));
            autoSuggestionPopUpWindow.revalidate();
            autoSuggestionPopUpWindow.repaint();

        }

        public void setDictionary(ArrayList<String> words) {
            dictionary.clear();
            if (words == null) {
                return;//so we can call constructor with null value for dictionary without exception thrown
            }
            for (String word : words) {
                dictionary.add(word);
            }
        }

        public JWindow getAutoSuggestionPopUpWindow() {
            return autoSuggestionPopUpWindow;
        }

        public Window getContainer() {
            return container;
        }

        public JTextField getTextField() {
            return textField;
        }

        public void addToDictionary(String word) {
            dictionary.add(word);
        }

        boolean wordTyped(String typedWord) {

            if (typedWord.isEmpty()) {
                return false;
            }
            //System.out.println("Typed word: " + typedWord);

            boolean suggestionAdded = false;

            for (String word : dictionary) {//get words in the dictionary which we added
                boolean fullymatches = true;
                for (int i = 0; i < typedWord.length(); i++) {//each string in the word
                    if (!typedWord.toLowerCase().startsWith(String.valueOf(word.toLowerCase().charAt(i)), i)) {//check for match
                        fullymatches = false;
                        break;
                    }
                }
                if (fullymatches) {
                    addWordToSuggestions(word);
                    suggestionAdded = true;
                }
            }
            return suggestionAdded;
        }
    }

    class SuggestionLabel extends JLabel {

        private boolean focused = false;
        private final JWindow autoSuggestionsPopUpWindow;
        private final JTextField textField;
        private final AutoSuggestor autoSuggestor;
        private Color suggestionsTextColor, suggestionBorderColor;

        public SuggestionLabel(String string, final Color borderColor, Color suggestionsTextColor, AutoSuggestor autoSuggestor) {
            super(string);

            this.suggestionsTextColor = suggestionsTextColor;
            this.autoSuggestor = autoSuggestor;
            this.textField = autoSuggestor.getTextField();
            this.suggestionBorderColor = borderColor;
            this.autoSuggestionsPopUpWindow = autoSuggestor.getAutoSuggestionPopUpWindow();

            initComponent();
        }

        private void initComponent() {
            setFocusable(true);
            setForeground(suggestionsTextColor);

            addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent me) {
                    super.mouseClicked(me);

                    replaceWithSuggestedText();

                    autoSuggestionsPopUpWindow.setVisible(false);
                }
            });

            getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, true), "Enter released");
            getActionMap().put("Enter released", new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    replaceWithSuggestedText();
                    autoSuggestionsPopUpWindow.setVisible(false);
                }
            });
        }

        public void setFocused(boolean focused) {
            if (focused) {
                setBorder(new LineBorder(suggestionBorderColor));
            } else {
                setBorder(null);
            }
            repaint();
            this.focused = focused;
        }

        public boolean isFocused() {
            return focused;
        }

        private void replaceWithSuggestedText() {
            String suggestedWord = getText();
            String text = textField.getText();
            String typedWord = autoSuggestor.getCurrentlyTypedWord();
            String t = text.substring(0, text.lastIndexOf(typedWord));
            String tmp = t + text.substring(text.lastIndexOf(typedWord)).replace(typedWord, suggestedWord);
            textField.setText(tmp);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblFav;
    private javax.swing.JLabel lblOut;
    private javax.swing.JLabel lblPrompt;
    private javax.swing.JLabel lblPrompt1;
    private javax.swing.JTable tblFav;
    private javax.swing.JTable tblProduct;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
